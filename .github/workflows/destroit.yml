name: Destroy React Frontend Infrastructure
on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Escribe "DESTROY" para confirmar la eliminaci√≥n de recursos'
        required: true
        type: string
      environment:
        description: 'Ambiente a destruir'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  issues: write

jobs:
  validate-input:
    runs-on: ubuntu-latest
    outputs:
      should_destroy: ${{ steps.validate.outputs.should_destroy }}
    steps:
      - name: Validate destruction confirmation
        id: validate
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" = "DESTROY" ]; then
            echo "should_destroy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Confirmaci√≥n de destrucci√≥n v√°lida"
          else
            echo "should_destroy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Confirmaci√≥n inv√°lida. Debes escribir exactamente 'DESTROY'"
            exit 1
          fi

  destroy:
    runs-on: ubuntu-latest
    needs: validate-input
    if: needs.validate-input.outputs.should_destroy == 'true'
    env:
      FUNCTION_NAME: react-frontend
      FRONTEND_BUCKET: react-frontend-bucket-${{ github.event.inputs.environment }}-01
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Nota: Mantenemos el bucket S3 intacto con sus archivos
      - name: Check S3 bucket status
        run: |
          echo "üì¶ Verificando estado del bucket S3: ${{ env.FRONTEND_BUCKET }}"
          
          if aws s3api head-bucket --bucket ${{ env.FRONTEND_BUCKET }} 2>/dev/null; then
            OBJECT_COUNT=$(aws s3 ls s3://${{ env.FRONTEND_BUCKET }} --recursive | wc -l)
            echo "‚úÖ Bucket encontrado con ${OBJECT_COUNT} objetos"
            echo "‚ÑπÔ∏è  El bucket y sus archivos se mantendr√°n intactos"
          else
            echo "‚ö†Ô∏è Bucket no existe o no es accesible"
          fi

      # Invalidar CloudFront antes de destruir (opcional pero recomendado)
      - name: Final CloudFront cache invalidation
        run: |
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "üîÑ Invalidando cach√© de CloudFront una √∫ltima vez..."
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*" || echo "‚ö†Ô∏è No se pudo invalidar CloudFront"
          else
            echo "‚ö†Ô∏è CLOUDFRONT_DISTRIBUTION_ID no configurado"
          fi

      # Descargar el estado de Terraform
      - name: Download Terraform State
        working-directory: terraform
        run: |
          echo "üì• Descargando estado de Terraform..."
          aws s3 cp s3://bucket-dev-capo-app-01/terraform-states/${FUNCTION_NAME}-terraform.tfstate . || true
          
          if [ -f "${FUNCTION_NAME}-terraform.tfstate" ]; then
            echo "‚úÖ Estado de Terraform encontrado"
            cp ${FUNCTION_NAME}-terraform.tfstate terraform.tfstate
            
            # Mostrar recursos que ser√°n destruidos
            echo "üìã Recursos que ser√°n destruidos:"
            terraform show -json terraform.tfstate | jq -r '.values.root_module.resources[].address' || echo "No se pudo mostrar recursos"
          else
            echo "‚ö†Ô∏è No se encontr√≥ estado de Terraform. Los recursos podr√≠an no existir o fueron creados manualmente"
            exit 0
          fi

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      # Plan de destrucci√≥n (para verificar qu√© se va a eliminar)
      - name: Terraform Destroy Plan
        working-directory: terraform
        run: |
          echo "üîç Generando plan de destrucci√≥n..."
          terraform plan -destroy \
            -var="env=${{ env.ENVIRONMENT }}" \
            -var="frontend_bucket_name=${{ env.FRONTEND_BUCKET }}" \
            -out=destroy.tfplan
          
          echo "üìã Recursos que ser√°n destruidos:"
          terraform show destroy.tfplan

      # Destrucci√≥n real de la infraestructura
      - name: Terraform Destroy
        working-directory: terraform
        run: |
          echo "üí• Iniciando destrucci√≥n de infraestructura..."
          terraform apply destroy.tfplan
          echo "‚úÖ Infraestructura destruida exitosamente"

      # Limpiar el estado de Terraform del S3
      - name: Clean Terraform State from S3
        run: |
          echo "üßπ Limpiando estado de Terraform de S3..."
          aws s3 rm s3://bucket-dev-capo-app-01/terraform-states/${FUNCTION_NAME}-terraform.tfstate || echo "‚ö†Ô∏è Estado ya eliminado o no existe"
          echo "‚úÖ Estado de Terraform limpiado"

      # Verificaci√≥n final (sin verificar bucket que se mantiene)
      - name: Verify Destruction
        run: |
          echo "üîç Verificando que los recursos fueron eliminados..."
          
          # Verificar CloudFront (opcional, puede tomar tiempo en propagarse)
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            DISTRIBUTION_STATUS=$(aws cloudfront get-distribution --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --query 'Distribution.Status' --output text 2>/dev/null || echo "NotFound")
            if [ "$DISTRIBUTION_STATUS" = "NotFound" ]; then
              echo "‚úÖ Distribuci√≥n de CloudFront eliminada"
            else
              echo "‚ö†Ô∏è Distribuci√≥n de CloudFront a√∫n existe (Estado: $DISTRIBUTION_STATUS)"
              echo "Nota: Las distribuciones de CloudFront pueden tardar en eliminarse completamente"
            fi
          fi
          
          # Verificar que el bucket siga existiendo (como debe ser)
          if aws s3api head-bucket --bucket ${{ env.FRONTEND_BUCKET }} 2>/dev/null; then
            echo "‚úÖ Bucket S3 conservado correctamente: ${{ env.FRONTEND_BUCKET }}"
          else
            echo "‚ö†Ô∏è Bucket S3 no encontrado (esto puede ser normal seg√∫n tu configuraci√≥n)"
          fi
          
          echo "üéâ Proceso de destrucci√≥n completado - Bucket S3 conservado"

  post-destroy-cleanup:
    runs-on: ubuntu-latest
    needs: [validate-input, destroy]
    if: always() && needs.destroy.result == 'success'
    steps:
      - name: Create cleanup issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üóëÔ∏è Infraestructura destruida - ${context.payload.inputs.environment}`,
              body: `## Resumen de Destrucci√≥n
              
              La infraestructura del ambiente **${context.payload.inputs.environment}** ha sido destruida exitosamente.
              
              ### Recursos eliminados:
              - ‚úÖ Distribuci√≥n CloudFront
              - ‚úÖ Registros Route53 (si exist√≠an)
              - ‚úÖ Estado de Terraform
              - ‚ÑπÔ∏è  Bucket S3 conservado: react-frontend-bucket-${context.payload.inputs.environment}-01
              
              ### Ejecutado por:
              - Usuario: @${context.actor}
              - Commit: ${context.sha}
              - Fecha: ${new Date().toISOString()}
              
              ### Pr√≥ximos pasos:
              - [ ] Verificar que no queden costos asociados en AWS
              - [ ] Confirmar que los dominios apunten correctamente
              - [ ] Actualizar documentaci√≥n si es necesario
              
              cc: @${context.actor}`,
              labels: ['infrastructure', 'destruction', 'cleanup']
            })